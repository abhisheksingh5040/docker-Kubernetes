=====================================================
			Docker
=====================================================

---------------------------------------------------
#  Virtualization 
---------------------------------------------------
   -> Hypervisor.
   
   ----------------
   # Advantages
   ----------------
   -> Multiple OS in the same machine.
   -> Easy Maintenance & Recovery 
   -> Lower Total cost of ownership.
   
   ----------------
   # Disadvantages
   ----------------
   -> Multiple VMs Lead to unstable performance.
   -> Hypervisors are not as efficient as host os.
   -> Long boot-up process(Approx. 1 min)
   
---------------------------------------------------
#  Containerization 
---------------------------------------------------
      
   ----------------
   # Advantages
   ----------------
   -> Containers OS same OS Kernel are lighter & smaller.
   -> Better Resource Utilization comapred to VMs.
   -> Short Boot-Up Process(1/20th of a second)
   
   
-----------------------------------------------------
# Docker Commands
-----------------------------------------------------
 -> docker info
 -> docker images
 -> docker rmi <image id>
 -> docker rm <image> 
 -> docker pull <image> 
 -> docker run <image>
 -> docker ps
 -> docekr ps -a
 

-------------------------------------------------------
# Docker Terminology
-------------------------------------------------------

1) Docker file 
   -> Intrstruction to create an image. It contains Docker Domain keywords to build image
   
2) Docker Image
   -> Docker Image is a package which contains everything (app code + softwares + env + libararies)
   
3) Docker Conatiner
   -> Run time instance of docker Image
   
4) Docker Registry
   -> It is a place to store a docker images. (public [Docker hub] / private[Nexus, JFrog, AWS ECR,D.T.R])
   
5) Docker Engine
   -> It is a software which will create docker images and Docker container.
   
   
----------------------------------------------------------
# Docker file command
----------------------------------------------------------

==> docker build -t myfirstimg .
==> docker tag myfirstimg username/myfirstimg
==> docker push username/myfirstimg

---------------------------------------------------------
# Docker File
---------------------------------------------------------
 -> Docker file contains instruction to build docker image.
 -> In docker file we will use DSL (Domain Specific Language) keyword.
 -> docker engine will process dockerfile instruction from top to bottom.
 -> Docker keyword
 ------------------
 
 FROM : It indicate base image to run our application. on the top of base image we will create our own image.
 -> Syntax :  FROM <Image Name>
 -> Example :
 		FROM java:jdk-1.8.0
 		FROM tomcat:9.2
 		FROM mysql 
 
 MAINTAINER : It is used to represent owner of the docker file.
 -> Syntax : MAINTAINER Abhishek<abhishekmech95@gmail.com>	
 	
 COPY : It is used to copy/folder to image while creating an image
  -> Syntax : COPY <source> <destination>
  
 ADD :
 -> It is also used to copy files to image while creating an image.
 -> ADD keyword can download files from the remote location(http).
 -> ADD keyword will extract tar file while copying to image.
 -> Syntax : ADD <source> <destination>
             ADD <url-to-download> <destination>
      
 RUN :
 -> RUN command is used to execute commands on top of base image.
 -> RUN command instruction will execute while creating an image.
 -> We can write multiple RUN instruction, they will execute in order(from top to bottom)
 
 Example:
  RUN mkdir workspace.
  RUN yum install git.
  
  FROM UBUNTU
  Docker file              ----build-->            docker Image         ---run--->           docker container
                            download git                              start tomcat-server 
                             (RUN)                                          (CMD)
                         while creating image                         while creating container
            
 
 CMD : 
 -> CMD is also used to execute commands.
 -> CMD instructions will execute while creating container.
 -> we can write multiple CMD instructions in dockerfile but docker will process only last CMD instruction.
 NOTE: there is no use of writing multiple CMD command.
 
 Example:
 CMD sudo start tomcat
 
 -----------------------------------
 # Sample Docker file
 -----------------------------------
 
 FROM ubuntu
 MAINTAINER Abhishek Singh
 RUN echo "Run One"
 RUN echo "Run Two"
 CMD echo "CMD One"
 CMD echo "CMD Two"
 RUN echo "Run Three"
 
 -----------------------------------
 -> We can override using runtime CMD.
 -> It will print only date 

    docker run imageOne date
 ------------------------------------
 # We can change docker file name
  mv DockerFile DockerFile_One
 
 # Creating Docker image using Dockerfile_One
   docker build -f DockerFile_One -t imagetwo .
 
 ENTRYPOINT :
 -> It is used to execute while creating container.
 NOTE : CMD instructions we can override as ENTRYPOINT instruction we can't override.
 
 Example:
 ENTRYPOINT["echo","Welcome"]
 
 WORKDIR:
 -> It is used to set Working Directory for an image/container.
 Ex: WORKDIR <DIR-PATH>
 NOTE : The Docker file instruction which are available after WORKDIR those instructions will be process from given working directory.
 
 ENV :
 -> It is used to set ENV variables.
 Ex: ENV <key><value>
 
 LABEL :
 -> LABEL will represent data in key value pair.
 -> It is used to add meta data for our image.
 
 Ex : LABEL branchName release
 
 ARG:
 -> It is used to avoid hard coded values in docker file.
 
 Ex:
 ARG branch=develop
 LABEL branch $branch
 
 $ docker build -t imageOne --build-arg branch=feature
 
 USER :
 -> We can set USER for an image/container.
 NOTE : After USER instruction, remaining instruction will be processed with given USER.
 
 EXPOSE :
 -> It represents on which port number our conatiner is running.
 -> It is just like  a documention to understand.
 
 VOLUME :
 -> It is used for data storage.
 
 +++++++++++++++++++++++++++++++++++++++
 -> docker run -d -p 8080:8080 sb-rest-app
 -> -d :  for detached means after execution we can run any command.
 -> -p : port 
 -> first 8080: host port
 -> second 808 : docker port
 
  





